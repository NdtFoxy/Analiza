const fractalButtons = document.querySelectorAll('button[data-key]');
const statusElement = document.getElementById('status');
const canvas = document.getElementById('fractalCanvas');
const ctx = canvas.getContext('2d');
const pointsSlider = document.getElementById('pointsSlider');
const pointsValue = document.getElementById('pointsValue');
const applyButton = document.getElementById('applyButton');
const paletteOptions = document.querySelectorAll('.palette-option');
const progressOverlay = document.getElementById('progressOverlay');
const progressBarFill = document.getElementById('progressBarFill');
const progressPercentage = document.getElementById('progressPercentage');
const progressText = document.getElementById('progressText');
const toastContainer = document.getElementById('toastContainer');

let currentFractalKey = null;
let currentFractalName = null;
let currentPalette = 'vibrant';
let currentPoints = 100000;
let lastGeneratedFractalKey = null;
let lastGeneratedPoints = 100000;
let isGenerating = false;

const colorPalettes = {
    vibrant: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E2', '#F8B88B', '#A9DFBF'],
    cool: ['#667eea', '#764ba2', '#f093fb', '#4facfe', '#00f2fe', '#a8edea', '#fed6e3', '#c471f5', '#fa709a', '#fee140'],
    fire: ['#ff0844', '#ffb199', '#ff9a00', '#ff6348', '#ffa502', '#ff4757', '#ff6b81', '#ff7979', '#eb4d4b', '#ee5a6f'],
    ocean: ['#2E3192', '#1BFFFF', '#00CED1', '#4682B4', '#5F9EA0', '#20B2AA', '#48D1CC', '#40E0D0', '#00FFFF', '#E0FFFF'],
    sunset: ['#ff6b6b', '#feca57', '#ee5a6f', '#ff9ff3', '#ffa502', '#ff6348', '#ff7979', '#ff8c94', '#ffa07a', '#ffb19d'],
    forest: ['#26de81', '#20bf6b', '#0fb9b1', '#2bcbba', '#45aaf2', '#4b7bec', '#a55eea', '#5f27cd', '#00d2d3', '#01a3a4']
};

let cachedFractalData = null;
let cachedFractalName = null;

function showToast(message, type = 'info', duration = 3000) {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    toastContainer.appendChild(toast);
    setTimeout(() => toast.style.opacity = '1', 10);
    setTimeout(() => {
        toast.classList.add('removing');
        setTimeout(() => toast.remove(), 400);
    }, duration);
}

pointsSlider.addEventListener('input', (e) => {
    currentPoints = parseInt(e.target.value);
    const displayValue = currentPoints >= 1000 ? `${Math.round(currentPoints / 1000)}k` : currentPoints;
    pointsValue.textContent = displayValue;
    if (currentPoints !== lastGeneratedPoints) {
        applyButton.style.opacity = '1';
        applyButton.style.pointerEvents = 'auto';
        applyButton.textContent = `Zastosuj (${displayValue})`;
    } else {
        applyButton.textContent = 'Zastosuj';
    }
});

applyButton.addEventListener('click', () => {
    if (currentPoints === lastGeneratedPoints && currentFractalKey === lastGeneratedFractalKey) {
        showToast(`‚ö†Ô∏è Liczba punkt√≥w jest ju≈º taka sama (${currentPoints})`, 'info', 2000);
        return;
    }
    if (!currentFractalKey) {
        showToast('‚ùå Najpierw wybierz fraktal', 'error', 2500);
        return;
    }
    if (isGenerating) {
        showToast('‚è≥ Czekaj na zako≈Ñczenie poprzedniego generowania', 'info', 2000);
        return;
    }
    const displayValue = currentPoints >= 1000 ? `${Math.round(currentPoints / 1000)}k` : currentPoints;
    showToast(`‚è≥ Generowanie z ${displayValue} punktami...`, 'info', 2000);
    lastGeneratedPoints = currentPoints;
    cachedFractalData = null;
    generateFractal(currentFractalKey, currentFractalName);
});

paletteOptions.forEach(option => {
    option.addEventListener('click', () => {
        const paletteName = option.dataset.palette;
        paletteOptions.forEach(opt => opt.classList.remove('active'));
        option.classList.add('active');
        const oldPalette = currentPalette;
        currentPalette = paletteName;

        if (currentFractalKey === "17") {
             showToast(`üé® Zmieniono paletƒô: ${oldPalette} ‚Üí ${currentPalette}`, 'success', 2500);
             drawPythagoreanTree(); // Redraw tree immediately with new palette
        } else if (cachedFractalData && currentFractalKey) {
            showToast(`üé® Zmieniono paletƒô: ${oldPalette} ‚Üí ${currentPalette}`, 'success', 2500);
            drawFractalPoints(cachedFractalData);
        } else {
            showToast(`üé® Paleta zmieniona na: ${currentPalette}`, 'info', 2000);
        }
    });
});

fractalButtons.forEach(button => {
    button.addEventListener('click', () => {
        const fractalKey = button.dataset.key;
        const fractalName = button.textContent;
        currentFractalKey = fractalKey;
        currentFractalName = fractalName;
        if (isGenerating) {
            showToast('‚è≥ Czekaj na zako≈Ñczenie poprzedniego generowania', 'info', 2000);
            return;
        }
        fractalButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        cachedFractalData = null;
        cachedFractalName = null;
        lastGeneratedFractalKey = null;
        lastGeneratedPoints = currentPoints;
        const displayValue = currentPoints >= 1000 ? `${Math.round(currentPoints / 1000)}k` : currentPoints;
        showToast(`üîÑ Generowanie ${fractalName} (${displayValue})...`, 'info', 2000);
        generateFractal(fractalKey, fractalName);
    });
});

async function generateFractal(fractalKey, fractalName) {
    if (fractalKey === "17") {
        isGenerating = true;
        showProgress();
        statusElement.textContent = '‚è≥ Malowanie...';
        statusElement.style.color = '#FFD700';
        setTimeout(() => {
            drawPythagoreanTree();
            hideProgress();
            isGenerating = false;
            showToast('‚úÖ Pythagorean Tree (Recursive) gotowy!', 'success', 3000);
            statusElement.textContent = '‚úÖ Pythagorean Tree (Recursive)';
            statusElement.style.color = '#26de81';
        }, 100);
        return;
    }
    isGenerating = true;
    showProgress();
    statusElement.textContent = '‚è≥ Przygotowanie...';
    statusElement.style.color = '#FFD700';
    simulateProgress();
    if (window.electronAPI && window.electronAPI.generateFractal) {
        try {
            const response = await window.electronAPI.generateFractal(fractalKey, currentPoints);
            if (response && response.error) throw new Error(response.error);
            handleFractalData(response);
        } catch (error) {
            hideProgress();
            isGenerating = false;
            statusElement.textContent = `‚ùå B≈ÇƒÖd: ${error}`;
            statusElement.style.color = '#FF6B6B';
            showToast(`‚ùå B≈ÇƒÖd: ${error}`, 'error', 4000);
        }
    } else {
        showToast('‚ùå Electron API niedostƒôpny', 'error', 3000);
        hideProgress();
        isGenerating = false;
    }
}

// ==================== PYTHAGOREAN TREE 

function drawTreeSquare(p1, p2, p3, p4, color) {
    // 1. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    ctx.beginPath();
    // 2. –ü–µ—Ä–µ–º–µ—â–∞–µ–º "–ø–µ—Ä–æ" –≤ –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É (p1), –Ω–µ —Ä–∏—Å—É—è –ª–∏–Ω–∏—é
    ctx.moveTo(p1.x, p1.y);
    // 3. –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å–æ–µ–¥–∏–Ω—è—è –≤—Å–µ —á–µ—Ç—ã—Ä–µ —É–≥–ª–∞
    ctx.lineTo(p2.x, p2.y);
    ctx.lineTo(p3.x, p3.y);
    ctx.lineTo(p4.x, p4.y);
    // 4. –ó–∞–º—ã–∫–∞–µ–º –ø—É—Ç—å, —Å–æ–µ–¥–∏–Ω—è—è –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É —Å –ø–µ—Ä–≤–æ–π
    ctx.closePath();
    
    // 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –∫–≤–∞–¥—Ä–∞—Ç–∞
    ctx.fillStyle = color;
    // 6. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –æ–±–≤–æ–¥–∫–∏ (–∫–æ–Ω—Ç—É—Ä–∞) –∫–≤–∞–¥—Ä–∞—Ç–∞
    ctx.strokeStyle = 'rgba(0, 0, 0, 0.2)';
    ctx.lineWidth = 0.8;
    
    // 7. –ó–∞–ª–∏–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    ctx.fill();
    // 8. –†–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä —Ñ–∏–≥—É—Ä—ã
    ctx.stroke();
}

function drawTreeBranch(p1, p2, currentDepth, maxDepth, colors) {
    // 1. –£–°–õ–û–í–ò–ï –û–°–¢–ê–ù–û–í–ö–ò (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤ —Ä–µ–∫—É—Ä—Å–∏–∏!)
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∞–∫—Å–∏–º—É–º–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ.
    // –≠—Ç–æ –Ω–µ –¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è –∏ —É–π—Ç–∏ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å.
    if (currentDepth >= maxDepth) {
        return;
    }

    // 2. –ì–ï–û–ú–ï–¢–†–ò–Ø: –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –∫–≤–∞–¥—Ä–∞—Ç
    // p1 –∏ p2 ‚Äî —ç—Ç–æ –¥–≤–µ —Ç–æ—á–∫–∏, –æ–±—Ä–∞–∑—É—é—â–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ (–≤–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞).
    const dx = p2.x - p1.x; // –í–µ–∫—Ç–æ—Ä –æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø–æ X
    const dy = p2.y - p1.y; // –í–µ–∫—Ç–æ—Ä –æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø–æ Y

    // –ù–∞—Ö–æ–¥–∏–º –¥–≤–µ –¥—Ä—É–≥–∏–µ –≤–µ—Ä—à–∏–Ω—ã –∫–≤–∞–¥—Ä–∞—Ç–∞ (p3 –∏ p4), "–ø–æ–¥–Ω—è–≤" –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä –∏–∑ —Ç–æ—á–µ–∫ p1 –∏ p2.
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä—é–∫: –≤–µ–∫—Ç–æ—Ä, –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä—É (dx, dy), —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä (dy, -dx).
    const p3 = { x: p2.x + dy, y: p2.y - dx };
    const p4 = { x: p1.x + dy, y: p1.y - dx };

    // 3. –†–ò–°–û–í–ê–ù–ò–ï: –†–∏—Å—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
    // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏
    const colorIndex = (currentDepth + 1) % colors.length;
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É "–∫–∏—Å—Ç—å", —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–≤–∞–¥—Ä–∞—Ç
    drawTreeSquare(p1, p2, p3, p4, colors[colorIndex]);

    // 4. –ì–ï–û–ú–ï–¢–†–ò–Ø: –ù–∞—Ö–æ–¥–∏–º –≤–µ—Ä—à–∏–Ω—É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ç–æ–∫
    // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É –Ω–æ–≤–æ–π –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–≤–∞–¥—Ä–∞—Ç–∞ (–º–µ–∂–¥—É p4 –∏ p3)
    const midX = p4.x + (p3.x - p4.x) / 2;
    const midY = p4.y + (p3.y - p4.y) / 2;
    
    // –ò–∑ —ç—Ç–æ–π —Å–µ—Ä–µ–¥–∏–Ω—ã —Å—Ç—Ä–æ–∏–º —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫.
    // –ï–≥–æ –≤–µ—Ä—à–∏–Ω–∞ (pTop) –±—É–¥–µ—Ç –æ–±—â–µ–π —Ç–æ—á–∫–æ–π –¥–ª—è –¥–≤—É—Ö —Å–ª–µ–¥—É—é—â–∏—Ö, –º–µ–Ω—å—à–∏—Ö –≤–µ—Ç–æ–∫.
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç—Ä—é–∫ —Å –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã–º –≤–µ–∫—Ç–æ—Ä–æ–º.
    const pTop = {
        x: midX + (p3.y - p4.y) / 2,
        y: midY - (p3.x - p4.x) / 2
    };

    // 5. –†–ï–ö–£–†–°–ò–í–ù–´–ï –í–´–ó–û–í–´: –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö –Ω–æ–≤—ã—Ö –≤–µ—Ç–æ–∫
    // –í—ã–∑—ã–≤–∞–µ–º —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª–µ–≤–æ–π –≤–µ—Ç–∫–∏. –ï–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –±—É–¥–µ—Ç –æ—Ç—Ä–µ–∑–æ–∫ –æ—Ç p4 –¥–æ pTop.
    drawTreeBranch(p4, pTop, currentDepth + 1, maxDepth, colors);
    // –í—ã–∑—ã–≤–∞–µ–º —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–æ–π –≤–µ—Ç–∫–∏. –ï–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –±—É–¥–µ—Ç –æ—Ç—Ä–µ–∑–æ–∫ –æ—Ç pTop –¥–æ p3.
    drawTreeBranch(pTop, p3, currentDepth + 1, maxDepth, colors);
}

function drawPythagoreanTree() {
    // 1. –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç, –∑–∞–ª–∏–≤–∞—è –µ–≥–æ —Ñ–æ–Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
    ctx.fillStyle = '#111827';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ä–µ–≤–∞
    const maxDepth = 12; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (–Ω–∞—Å–∫–æ–ª—å–∫–æ "–ø—É—à–∏—Å—Ç—ã–º" –±—É–¥–µ—Ç –¥–µ—Ä–µ–≤–æ)
    const palette = colorPalettes[currentPalette]; // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É
    
    // 3. –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ (—Å—Ç–≤–æ–ª–∞)
    // –†–∞–∑–º–µ—Ä —Å—Ç–≤–æ–ª–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ö–æ–ª—Å—Ç–∞
    const baseSize = Math.min(canvas.width, canvas.height) / 6;
    // –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–≤–æ–ª –≤–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É —Ö–æ–ª—Å—Ç–∞
    const startY = canvas.height - baseSize / 4;

    // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–≥–ª–æ–≤ —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
    const p1_base = { x: canvas.width / 2 - baseSize / 2, y: startY }; // –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
    const p2_base = { x: canvas.width / 2 + baseSize / 2, y: startY }; // –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
    const p3_top = { x: p2_base.x, y: startY - baseSize }; // –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
    const p4_top = { x: p1_base.x, y: startY - baseSize }; // –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π

    // 5. –†–∏—Å—É–µ–º —Å—Ç–≤–æ–ª –¥–µ—Ä–µ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à—É "–∫–∏—Å—Ç—å"
    drawTreeSquare(p1_base, p2_base, p3_top, p4_top, palette[0]);
    
    // 6. –ó–ê–ü–£–°–ö –†–ï–ö–£–†–°–ò–ò
    // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ `drawTreeBranch`, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–π –≤–µ—Ä—Ö–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–≤–æ–ª–∞ (–æ—Ç p4_top –¥–æ p3_top)
    // –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –≤–µ—Ç–æ–∫. –ù–∞—á–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ - 0.
    drawTreeBranch(p4_top, p3_top, 0, maxDepth, palette);
}

// =============================================================================

function handleFractalData(response) {
    if (!response) {
        hideProgress();
        isGenerating = false;
        statusElement.textContent = `‚ùå B≈ÇƒÖd: pusta odpowied≈∫ z Python`;
        statusElement.style.color = '#FF6B6B';
        showToast(`‚ùå Python zwr√≥ci≈Ç pustƒÖ odpowied≈∫`, 'error', 4000);
        return;
    }
    if (response.error) {
        hideProgress();
        isGenerating = false;
        statusElement.textContent = `‚ùå B≈ÇƒÖd: ${response.error}`;
        statusElement.style.color = '#FF6B6B';
        showToast(`‚ùå B≈ÇƒÖd: ${response.error}`, 'error', 4000);
        return;
    }
    if (!response.x || !response.y || !response.colors) {
        hideProgress();
        isGenerating = false;
        statusElement.textContent = `‚ùå B≈ÇƒÖd: niekompletne dane z Python`;
        statusElement.style.color = '#FF6B6B';
        showToast(`‚ùå Niekompletne dane z Python`, 'error', 4000);
        return;
    }
    
    cachedFractalData = response;
    cachedFractalName = response.name;
    lastGeneratedFractalKey = currentFractalKey;
    updateProgress(95, 'Rysowanie na canvas...');
    
    requestAnimationFrame(() => {
        try {
            drawFractalPoints(response);
            updateProgress(100, 'Gotowe!');
            setTimeout(() => {
                hideProgress();
                isGenerating = false;
                const pointsFormatted = response.x.length.toLocaleString('pl-PL');
                showToast(`‚úÖ ${response.name} (${pointsFormatted} punkt√≥w) | Paleta: ${currentPalette}`, 'success', 5000);
                statusElement.textContent = `‚úÖ ${response.name}`;
                statusElement.style.color = '#26de81';
            }, 500);
        } catch (error) {
            hideProgress();
            isGenerating = false;
            statusElement.textContent = `‚ùå B≈ÇƒÖd rysowania: ${error.message}`;
            statusElement.style.color = '#FF6B6B';
            showToast(`‚ùå B≈ÇƒÖd rysowania: ${error.message}`, 'error', 4000);
        }
    });
}

function showProgress() {
    progressOverlay.classList.add('active');
    progressBarFill.style.width = '0%';
    progressPercentage.textContent = '0%';
    progressText.textContent = 'Inicjalizacja...';
}

function hideProgress() {
    progressOverlay.classList.remove('active');
}

function updateProgress(percent, text) {
    progressBarFill.style.width = percent + '%';
    progressPercentage.textContent = Math.round(percent) + '%';
    if (text) progressText.textContent = text;
}

function simulateProgress() {
    const stages = [
        { percent: 15, text: 'Przygotowanie przeksztalcen IFS...', delay: 200 },
        { percent: 30, text: 'Inicjalizacja Chaos Game...', delay: 300 },
        { percent: 50, text: 'Generowanie punktow...', delay: 500 },
        { percent: 75, text: 'Zastosowanie Twierdzenia Banacha...', delay: 400 },
        { percent: 90, text: 'Finalizacja atraktora...', delay: 300 }
    ];
    let stageIndex = 0;
    function nextStage() {
        if (stageIndex < stages.length) {
            const stage = stages[stageIndex];
            updateProgress(stage.percent, stage.text);
            stageIndex++;
            setTimeout(nextStage, stage.delay);
        }
    }
    nextStage();
}

function drawFractalPoints({ x: x_coords, y: y_coords, colors: color_indices, name }) {
    // === –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ö–æ–ª—Å—Ç–∞ ===
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏ –Ω–∞ —á–µ—Ä–Ω—ã–π
    ctx.fillStyle = '#000000';
    // –ó–∞–ª–∏–≤–∞–µ–º –≤–µ—Å—å —Ö–æ–ª—Å—Ç —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // === –≠—Ç–∞–ø 2: –†–∞—Å—á–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ===

    // –ó–∞–¥–∞–µ–º –æ—Ç—Å—Ç—É–ø –≤ –ø–∏–∫—Å–µ–ª—è—Ö –æ—Ç –∫—Ä–∞–µ–≤ —Ö–æ–ª—Å—Ç–∞
    const margin = 40;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Ü–≤–µ—Ç–∞). –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (!x_coords || !y_coords || !color_indices || x_coords.length === 0) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏');
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç X –∏ Y
    const [minX, maxX] = findMinMax(x_coords);
    const [minY, maxY] = findMinMax(y_coords);
    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É —Ñ—Ä–∞–∫—Ç–∞–ª–∞
    const fractalWidth = maxX - minX;
    const fractalHeight = maxY - minY;
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å, –µ—Å–ª–∏ –≤—Å–µ —Ç–æ—á–∫–∏ –ª–µ–∂–∞—Ç –Ω–∞ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏
    const safeWidth = Math.max(fractalWidth, 1e-9);
    const safeHeight = Math.max(fractalHeight, 1e-9);
    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –ø–æ –æ—Å–∏ X (–∫–∞–∫ –≤–ø–∏—Å–∞—Ç—å —à–∏—Ä–∏–Ω—É —Ñ—Ä–∞–∫—Ç–∞–ª–∞ –≤ —à–∏—Ä–∏–Ω—É —Ö–æ–ª—Å—Ç–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏)
    const scaleX = (canvas.width - margin * 2) / safeWidth;
    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –ø–æ –æ—Å–∏ Y (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≤—ã—Å–æ—Ç—ã)
    const scaleY = (canvas.height - margin * 2) / safeHeight;
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–º–µ–Ω—å—à–∏–π –∏–∑ –º–∞—Å—à—Ç–∞–±–æ–≤, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Ñ—Ä–∞–∫—Ç–∞–ª–∞
    const scale = Math.min(scaleX, scaleY);
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å–∏ X, —á—Ç–æ–±—ã –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∫—Ç–∞–ª –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    const offsetX = (canvas.width - fractalWidth * scale) / 2 - minX * scale;
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å–∏ Y, —á—Ç–æ–±—ã –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∫—Ç–∞–ª –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    const offsetY = (canvas.height - fractalHeight * scale) / 2 - minY * scale;
    
    // === –≠—Ç–∞–ø 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ –ø–∏–∫—Å–µ–ª–µ–π ===

    // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É
    const palette = colorPalettes[currentPalette];
    // –°–æ–∑–¥–∞–µ–º –≤ –ø–∞–º—è—Ç–∏ –±—É—Ñ–µ—Ä –¥–ª—è –ø–∏–∫—Å–µ–ª–µ–π —Ä–∞–∑–º–µ—Ä–æ–º —Å —Ö–æ–ª—Å—Ç (—ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ)
    const pixelData = ctx.createImageData(canvas.width, canvas.height);
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ –±—É—Ñ–µ—Ä–∞ (–∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å = 4 –∑–Ω–∞—á–µ–Ω–∏—è: R, G, B, A)
    const data = pixelData.data;
    // –°–æ–∑–¥–∞–µ–º "–∫–∞—Ä—Ç—É –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏", —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø–∏–∫—Å–µ–ª—å
    const densityMap = new Map();
    
    // === –≠—Ç–∞–ø 4: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ ===

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–∑ Python
    for (let i = 0; i < x_coords.length; i++) {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X –≤ –ø–∏–∫—Å–µ–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –Ω–∞ —Ö–æ–ª—Å—Ç–µ
        const canvasX = Math.round(x_coords[i] * scale + offsetX);
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y –≤ –ø–∏–∫—Å–µ–ª—å–Ω—É—é (–∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y, —Ç–∞–∫ –∫–∞–∫ —É —Ö–æ–ª—Å—Ç–∞ –æ—Å—å Y –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–Ω–∏–∑)
        const canvasY = Math.round(canvas.height - (y_coords[i] * scale + offsetY));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–∏–∫—Å–µ–ª—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ö–æ–ª—Å—Ç–∞
        if (canvasX >= 0 && canvasX < canvas.width && canvasY >= 0 && canvasY < canvas.height) {
            // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏–∫—Å–µ–ª—è –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ `data`
            const pixelIndex = (canvasY * canvas.width + canvasX) * 4;
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ü–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
            const colorIndex = color_indices[i] % palette.length;
            const color = parseHexColor(palette[colorIndex]);
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫–∞—Ä—Ç—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "512,384")
            const key = `${canvasX},${canvasY}`;
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏–∫—Å–µ–ª—è
            const density = (densityMap.get(key) || 0) + 1;
            densityMap.set(key, density);
            // –í—ã—á–∏—Å–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å/–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–ª–æ–≥–∞—Ä–∏—Ñ–º –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏)
            const intensity = Math.min(255, Math.log(density + 1) * 50);

            // –†–∏—Å—É–µ–º –ø–∏–∫—Å–µ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–æ–≤–∞—è —è—Ä–∫–æ—Å—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π (–ø—Ä–æ—Å—Ç–æ–π –±–ª–µ–Ω–¥–∏–Ω–≥)
            if (data[pixelIndex + 3] < intensity) {
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∞—Å–Ω–æ–≥–æ, –∑–µ–ª–µ–Ω–æ–≥–æ, —Å–∏–Ω–µ–≥–æ –∏ —è—Ä–∫–æ—Å—Ç–∏ (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏) –≤ –±—É—Ñ–µ—Ä
                data[pixelIndex + 0] = color.r;
                data[pixelIndex + 1] = color.g;
                data[pixelIndex + 2] = color.b;
                data[pixelIndex + 3] = intensity;
            }
        }
    }
    
    // === –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è ===
    
    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–µ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –≤ –ø–∞–º—è—Ç–∏ –±—É—Ñ–µ—Ä –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ –≤–∏–¥–∏–º—ã–π —Ö–æ–ª—Å—Ç –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é
    ctx.putImageData(pixelData, 0, 0);
    // –†–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö —Ñ—Ä–∞–∫—Ç–∞–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    drawInfo(name, x_coords.length, minX, maxX, minY, maxY);
}










/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ü–≤–µ—Ç –∏–∑ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (HEX, –Ω–∞–ø—Ä–∏–º–µ—Ä, "#FF6B6B")
 * –≤ –æ–±—ä–µ–∫—Ç —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ R, G, B (–Ω–∞–ø—Ä–∏–º–µ—Ä, {r: 255, g: 107, b: 107}).
 * @param {string} hex - –°—Ç—Ä–æ–∫–∞ —Å —Ü–≤–µ—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX.
 * @returns {object} - –û–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ r, g, b –∏–ª–∏ –±–µ–ª—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ HEX –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
 */
function parseHexColor(hex) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è "–∑–∞—Ö–≤–∞—Ç–∞" –ø–∞—Ä —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç–≤–µ—á–∞—é—â–∏—Ö –∑–∞ R, G –∏ B.
    // ^#? - –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å # –∏–ª–∏ –Ω–µ—Ç
    // ([a-f\d]{2}) - –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –¥–≤–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç R)
    // ...–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è G –∏ B
    // $ - –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏, i - –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    
    // –ï—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—à–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (result –Ω–µ null)
    return result ? 
        // —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–∞–∂–¥–∞—è –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–∞—è –ø–∞—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –∏–∑ 16-—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —á–∏—Å–ª–æ
        {r: parseInt(result[1], 16), g: parseInt(result[2], 16), b: parseInt(result[3], 16)} 
        // –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        : {r: 255, g: 255, b: 255};
}

/**
 * –†–∏—Å—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Ö–æ–ª—Å—Ç–∞.
 * @param {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ç–∞–ª–∞.
 * @param {number} pointCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫.
 * @param {number} minX, maxX, minY, maxY - –ì—Ä–∞–Ω–∏—Ü—ã —Ñ—Ä–∞–∫—Ç–∞–ª–∞.
 */
function drawInfo(name, pointCount, minX, maxX, minY, maxY) {
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const info = [
        `Fraktal: ${name}`,
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Ç–æ—á–µ–∫ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        `Punktow: ${pointCount.toLocaleString('pl-PL')}`,
        `Paleta: ${currentPalette}`,
        // –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        `X: [${minX.toFixed(2)}, ${maxX.toFixed(2)}]`,
        `Y: [${minY.toFixed(2)}, ${maxY.toFixed(2)}]`
    ];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    ctx.font = 'bold 11px monospace';
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —Ñ–æ–Ω–∞ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ (–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —á–µ—Ä–Ω—ã–π)
    ctx.fillStyle = 'rgba(0, 0, 0, 0.75)';
    // –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    ctx.fillRect(5, 5, 200, info.length * 16 + 10);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —Å–∞–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    ctx.fillStyle = '#4dc9b0';
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–∏—Å—É–µ–º –µ–µ –Ω–∞ —Ö–æ–ª—Å—Ç–µ
    info.forEach((text, idx) => {
        ctx.fillText(text, 10, 18 + idx * 16);
    });
}

/**
 * –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ —á–∏—Å–µ–ª.
 * @param {number[]} arr - –ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª.
 * @returns {[number, number]} - –ú–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: [min, max].
 */
function findMinMax(arr) {
    // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º [0, 0], —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    if (arr.length === 0) return [0, 0];
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º min –∏ max –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –º–∞—Å—Å–∏–≤–∞
    let min = arr[0], max = arr[0];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ
    for (let i = 1; i < arr.length; i++) {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—å—à–µ min, –æ–±–Ω–æ–≤–ª—è–µ–º min
        if (arr[i] < min) min = arr[i];
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ max, –æ–±–Ω–æ–≤–ª—è–µ–º max
        if (arr[i] > max) max = arr[i];
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—è
    return [min, max];
}

// –î–æ–±–∞–≤–ª—è–µ–º "—Å–ª—É—à–∞—Ç–µ–ª—è" —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ –≤—Å—è HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞
window.addEventListener('DOMContentLoaded', () => {
    // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
    console.log('‚úÖ Renderer.js - COMPLETE CODE - READY');
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    showToast('üëã Witaj w IFS Fractal Generator Pro!', 'info', 3000);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∫—Ç–∞–ª–∞ (–ü–∞–ø–æ—Ä–æ—Ç–Ω–∏–∫ –ë–∞—Ä–Ω—Å–ª–∏)
    const firstButton = document.querySelector('button[data-key="1"]');
    
    // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
    if (firstButton) {
        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É (1000 –º—Å) –∏ "–Ω–∞–∂–∏–º–∞–µ–º" –Ω–∞ –Ω–µ–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        setTimeout(() => firstButton.click(), 1000);
    }
});